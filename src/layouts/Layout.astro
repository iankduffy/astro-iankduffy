---
import '../styles/global.scss';

interface Props {
	title: string;
}

import { ViewTransitions } from 'astro:transitions';
import Header from './header/Header.astro';
import Footer from './footer/Footer.astro';

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" transition:persist>
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/logo.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title} | IanKDuffy.com</title>
		<meta property="og:title" content={`${title} | IanKDuffy.com`} />
		<ViewTransitions />
	</head>
	<body>
		<Header/>
			<slot />
		<Footer />
		<button id="toggle-mode" class="theme-switch-button">Toggle Theme</button>
	</body>
</html>

<script is:inline>
	document.addEventListener('astro:page-load', () => {
		const html =  document.querySelector('html');
		const theme = localStorage.getItem('theme') || html.style.getPropertyValue('color-scheme');
		html.style.setProperty("color-scheme", theme);
		const toggleMode = document.getElementById('toggle-mode');

		toggleMode.addEventListener('click', (e) => {
			html.style.viewTransitionName = 'changing-theme';
			if (document.startViewTransition) {
				document.startViewTransition(() => {
					const xPosition = `${e.clientX / window.innerWidth * 100}%`
					const yPosition = `${e.clientY / window.innerHeight * 100}%`
					html.style.setProperty('--theme-button-cord', `${xPosition} ${yPosition}`)
					const theme = html.style.getPropertyValue('color-scheme')
					html.style.setProperty("color-scheme", theme === 'light' ? 'dark' : 'light');
					localStorage.setItem('theme', theme === 'light' ? 'dark' : 'light');
				})
			} else {
				const theme = html.style.getPropertyValue('color-scheme');
				html.style.setProperty("color-scheme", theme === 'light' ? 'dark' : 'light');
				localStorage.setItem('theme', theme === 'light' ? 'dark' : 'light');
			}
		});
	})
</script>